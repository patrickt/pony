%if false  
  Copyright (c) 2009, ETH Zurich.
  All rights reserved.
  
  This file is distributed under the terms in the attached LICENSE file.
  If you do not find this file, copies can be found by writing to:
  ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
%endif

%include polycode.fmt


> module Language.FiletOFish.Expressions where

> import Language.FiletOFish.Constructs
> import Language.FiletOFish.Constructs
> import Language.FiletOFish.PureExpressions

> import Language.FiletOFish.IL.FoF.FoF



> data Heap = Hp { freshLoc :: Int ,
>                  refMap :: [(VarName, Data)],
>                  freshSLoc :: Int,
>                  strMap :: [(VarName, [(String, Data)])],
>                  freshALoc :: Int,
>                  arrayMap :: [(VarName, [Data])]}

> runAlgebra :: FoFConst (Heap -> (PureExpr, Heap)) -> 
>               (Heap -> (PureExpr, Heap))



> data Binding = Binding { freshVar :: Int ,
>                          defStructs :: [(String,TypeExpr)],
>                          defUnions :: [(String,TypeExpr)],
>                          defEnums :: [(String, [(String, Int)])] }

> compileAlgebra :: FoFConst (Binding -> (ILFoF, Binding)) ->
>                   (Binding -> (ILFoF, Binding))