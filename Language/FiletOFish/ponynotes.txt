FunAttr (in Constructs) could be extended.
FoFConst should become a data family, I think.
FoFConst maybe should derive Functor, if possible

Expressions.lhs is the sort of shit that has GOT TO GO.
Otherwise, people could just lug around FoF and 

class family PonyConstant where
  PonyConstant :: Data

Does runAlgebra need to be abstracted to the type-level?

The Pony pipeline can be seen as a sequence of four composed arrows.
The first is Parsec, which transforms source files to a list of SYB generics.
The second is PonyC, which transform a list of generics into FoF and enforces safety with functional dependencies.
The third is Filet-O-Fish itself, which transforms FoF structures into C.
The fourth is the IO monad, which transforms C into binary by calling the C compiler.

Query A B = mapping from Data to A |
Transformer = for all a and b -> Query a b
QueryM M A = Query (M A)


Monoid (Op a)

mkT :: (Data -> b) -> a -> 
everywhere :: Transformer -> Data -> Data
everywhere' :: Transformer -> Data -> Data

everywhereBut :: Query Bool -> Transformer -> Transformer

everywhereM :: GenericM m -> GenericM m

somewhere :: a, MonadPlus m, => Query M m a -> MQuery m a

everything :: Monoid a -> Query a -> Query a -- applied from top-down, left-to-right
listify :: Typeable r => (r -> Bool) -> Query [r]
something :: MQuery a -> MQuery
synthesize :: s -> (t -> s -> s) -> GenericQ (s -> t) -> GenericQ t
gsize :: Data a => a -> Int
glength :: GenericQ Int
gdepth :: GenericQ Int
gcount :: GenericQ Bool -> GenericQ Int
gnodecount :: GenericQ Int
gtypecount :: Typeable a => a -> GenericQ Int
gfindtype :: (Data x, Typeable y) => x -> Maybe y