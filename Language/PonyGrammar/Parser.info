-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.9 from Language/PonyGrammar/Parser.y
-----------------------------------------------------------------------------

state 13 contains 4 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 14 contains 4 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 21 contains 4 shift/reduce conflicts and 4 reduce/reduce conflicts.
state 23 contains 4 shift/reduce conflicts.
state 24 contains 4 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 25 contains 4 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 26 contains 4 shift/reduce conflicts and 1 reduce/reduce conflicts.

rule 9 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseGrammar -> Grammar                     (0)
	Grammar -> gram identifier '{' Prods '}'           (1)
	Grammar -> gram identifier extends identifier '{' Prods '}'   (2)
	Prods -> Prod Prods                                (3)
	Prods ->                                           (4)
	Prod -> identifier '::=' Expr '.'                  (5)
	Prod -> identifier '::+' Expr '.'                  (6)
	Expr -> Terms                                      (7)
	Terms -> Term Terms                                (8)
	Terms ->                                           (9)
	Term -> Factors                                    (10)
	Factors -> Factor Factors                          (11)
	Factors ->                                         (12)
	Factor -> identifier                               (13)
	Factor -> '[' Expr ']'                             (14)
	Factor -> '(' Expr ')'                             (15)
	Factor -> '{' Expr '}'                             (16)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'::+'          { TokenAdd }
	'::='          { TokenEq }
	gram           { TokenGrammar }
	extends        { TokenExt }
	'.'            { TokenPeriod }
	'['            { TokenLSBracket }
	']'            { TokenRSBracket }
	'{'            { TokenLBracket }
	'}'            { TokenRBracket }
	'('            { TokenLParen }
	')'            { TokenRParen }
	identifier     { TokenId $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseGrammar rule  0
	Grammar         rules 1, 2
	Prods           rules 3, 4
	Prod            rules 5, 6
	Expr            rule  7
	Terms           rules 8, 9
	Term            rule  10
	Factors         rules 11, 12
	Factor          rules 13, 14, 15, 16

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	gram           shift, and enter state 4

	Grammar        goto state 3

State 1


	gram           shift, and enter state 2


State 2

	Grammar -> gram . identifier '{' Prods '}'          (rule 1)

	identifier     shift, and enter state 6


State 3

	%start_parseGrammar -> Grammar .                    (rule 0)

	%eof           accept


State 4

	Grammar -> gram . identifier '{' Prods '}'          (rule 1)
	Grammar -> gram . identifier extends identifier '{' Prods '}'    (rule 2)

	identifier     shift, and enter state 5


State 5

	Grammar -> gram identifier . '{' Prods '}'          (rule 1)
	Grammar -> gram identifier . extends identifier '{' Prods '}'    (rule 2)

	extends        shift, and enter state 8
	'{'            shift, and enter state 7


State 6

	Grammar -> gram identifier . '{' Prods '}'          (rule 1)

	'{'            shift, and enter state 7


State 7

	Grammar -> gram identifier '{' . Prods '}'          (rule 1)

	'}'            reduce using rule 4
	identifier     shift, and enter state 12

	Prods          goto state 10
	Prod           goto state 11

State 8

	Grammar -> gram identifier extends . identifier '{' Prods '}'    (rule 2)

	identifier     shift, and enter state 9


State 9

	Grammar -> gram identifier extends identifier . '{' Prods '}'    (rule 2)

	'{'            shift, and enter state 17


State 10

	Grammar -> gram identifier '{' Prods . '}'          (rule 1)

	'}'            shift, and enter state 16


State 11

	Prods -> Prod . Prods                               (rule 3)

	'}'            reduce using rule 4
	identifier     shift, and enter state 12

	Prods          goto state 15
	Prod           goto state 11

State 12

	Prod -> identifier . '::=' Expr '.'                 (rule 5)
	Prod -> identifier . '::+' Expr '.'                 (rule 6)

	'::+'          shift, and enter state 13
	'::='          shift, and enter state 14


State 13

	Prod -> identifier '::+' . Expr '.'                 (rule 6)

	'.'            reduce using rule 12
			(reduce using rule 9)

	'['            shift, and enter state 24
			(reduce using rule 12)

	'{'            shift, and enter state 25
			(reduce using rule 12)

	'('            shift, and enter state 26
			(reduce using rule 12)

	identifier     shift, and enter state 27
			(reduce using rule 12)


	Expr           goto state 28
	Terms          goto state 20
	Term           goto state 21
	Factors        goto state 22
	Factor         goto state 23

State 14

	Prod -> identifier '::=' . Expr '.'                 (rule 5)

	'.'            reduce using rule 12
			(reduce using rule 9)

	'['            shift, and enter state 24
			(reduce using rule 12)

	'{'            shift, and enter state 25
			(reduce using rule 12)

	'('            shift, and enter state 26
			(reduce using rule 12)

	identifier     shift, and enter state 27
			(reduce using rule 12)


	Expr           goto state 19
	Terms          goto state 20
	Term           goto state 21
	Factors        goto state 22
	Factor         goto state 23

State 15

	Prods -> Prod Prods .                               (rule 3)

	'}'            reduce using rule 3


State 16

	Grammar -> gram identifier '{' Prods '}' .          (rule 1)

	%eof           reduce using rule 1


State 17

	Grammar -> gram identifier extends identifier '{' . Prods '}'    (rule 2)

	'}'            reduce using rule 4
	identifier     shift, and enter state 12

	Prods          goto state 18
	Prod           goto state 11

State 18

	Grammar -> gram identifier extends identifier '{' Prods . '}'    (rule 2)

	'}'            shift, and enter state 36


State 19

	Prod -> identifier '::=' Expr . '.'                 (rule 5)

	'.'            shift, and enter state 35


State 20

	Expr -> Terms .                                     (rule 7)

	'.'            reduce using rule 7
	']'            reduce using rule 7
	'}'            reduce using rule 7
	')'            reduce using rule 7


State 21

	Terms -> Term . Terms                               (rule 8)

	'.'            reduce using rule 12
			(reduce using rule 9)

	'['            shift, and enter state 24
			(reduce using rule 12)

	']'            reduce using rule 12
			(reduce using rule 9)

	'{'            shift, and enter state 25
			(reduce using rule 12)

	'}'            reduce using rule 12
			(reduce using rule 9)

	'('            shift, and enter state 26
			(reduce using rule 12)

	')'            reduce using rule 12
			(reduce using rule 9)

	identifier     shift, and enter state 27
			(reduce using rule 12)


	Terms          goto state 34
	Term           goto state 21
	Factors        goto state 22
	Factor         goto state 23

State 22

	Term -> Factors .                                   (rule 10)

	'.'            reduce using rule 10
	'['            reduce using rule 10
	']'            reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	identifier     reduce using rule 10


State 23

	Factors -> Factor . Factors                         (rule 11)

	'.'            reduce using rule 12
	'['            shift, and enter state 24
			(reduce using rule 12)

	']'            reduce using rule 12
	'{'            shift, and enter state 25
			(reduce using rule 12)

	'}'            reduce using rule 12
	'('            shift, and enter state 26
			(reduce using rule 12)

	')'            reduce using rule 12
	identifier     shift, and enter state 27
			(reduce using rule 12)


	Factors        goto state 33
	Factor         goto state 23

State 24

	Factor -> '[' . Expr ']'                            (rule 14)

	'['            shift, and enter state 24
			(reduce using rule 12)

	']'            reduce using rule 12
			(reduce using rule 9)

	'{'            shift, and enter state 25
			(reduce using rule 12)

	'('            shift, and enter state 26
			(reduce using rule 12)

	identifier     shift, and enter state 27
			(reduce using rule 12)


	Expr           goto state 32
	Terms          goto state 20
	Term           goto state 21
	Factors        goto state 22
	Factor         goto state 23

State 25

	Factor -> '{' . Expr '}'                            (rule 16)

	'['            shift, and enter state 24
			(reduce using rule 12)

	'{'            shift, and enter state 25
			(reduce using rule 12)

	'}'            reduce using rule 12
			(reduce using rule 9)

	'('            shift, and enter state 26
			(reduce using rule 12)

	identifier     shift, and enter state 27
			(reduce using rule 12)


	Expr           goto state 31
	Terms          goto state 20
	Term           goto state 21
	Factors        goto state 22
	Factor         goto state 23

State 26

	Factor -> '(' . Expr ')'                            (rule 15)

	'['            shift, and enter state 24
			(reduce using rule 12)

	'{'            shift, and enter state 25
			(reduce using rule 12)

	'('            shift, and enter state 26
			(reduce using rule 12)

	')'            reduce using rule 12
			(reduce using rule 9)

	identifier     shift, and enter state 27
			(reduce using rule 12)


	Expr           goto state 30
	Terms          goto state 20
	Term           goto state 21
	Factors        goto state 22
	Factor         goto state 23

State 27

	Factor -> identifier .                              (rule 13)

	'.'            reduce using rule 13
	'['            reduce using rule 13
	']'            reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	identifier     reduce using rule 13


State 28

	Prod -> identifier '::+' Expr . '.'                 (rule 6)

	'.'            shift, and enter state 29


State 29

	Prod -> identifier '::+' Expr '.' .                 (rule 6)

	'}'            reduce using rule 6
	identifier     reduce using rule 6


State 30

	Factor -> '(' Expr . ')'                            (rule 15)

	')'            shift, and enter state 39


State 31

	Factor -> '{' Expr . '}'                            (rule 16)

	'}'            shift, and enter state 38


State 32

	Factor -> '[' Expr . ']'                            (rule 14)

	']'            shift, and enter state 37


State 33

	Factors -> Factor Factors .                         (rule 11)

	'.'            reduce using rule 11
	'['            reduce using rule 11
	']'            reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	identifier     reduce using rule 11


State 34

	Terms -> Term Terms .                               (rule 8)

	'.'            reduce using rule 8
	']'            reduce using rule 8
	'}'            reduce using rule 8
	')'            reduce using rule 8


State 35

	Prod -> identifier '::=' Expr '.' .                 (rule 5)

	'}'            reduce using rule 5
	identifier     reduce using rule 5


State 36

	Grammar -> gram identifier extends identifier '{' Prods '}' .    (rule 2)

	%eof           reduce using rule 2


State 37

	Factor -> '[' Expr ']' .                            (rule 14)

	'.'            reduce using rule 14
	'['            reduce using rule 14
	']'            reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	identifier     reduce using rule 14


State 38

	Factor -> '{' Expr '}' .                            (rule 16)

	'.'            reduce using rule 16
	'['            reduce using rule 16
	']'            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	identifier     reduce using rule 16


State 39

	Factor -> '(' Expr ')' .                            (rule 15)

	'.'            reduce using rule 15
	'['            reduce using rule 15
	']'            reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	identifier     reduce using rule 15


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 17
Number of terminals: 12
Number of non-terminals: 9
Number of states: 40
