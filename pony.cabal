Name:                pony
Version:             0.2.0
Synopsis:            a modular, extensible source transformer for systems programming

Description:         Pony is a tool intended for programmers of low-level systems. Code authors will write code in standard C99, then specify a set of  high-level transformations that they wish to add to their code, such as garbage collection, closures, and new operators. Pony will apply these transformations, ensure that the generated code is correct, and emit C99.

License:             BSD3
License-file:        LICENSE.md
Author:              Patrick Thomson
Maintainer:          thomsonp@gwmail.gwu.edu
Copyright:           (c) 2010-2012 George Washington University

Category:            Language
Build-type:          Configure
Stability:           alpha
Tested-with:         GHC
Cabal-version:       >= 1.14
Extra-source-files:  README.md, CREDITS.md, configure

Flag tests {
  Description:       Build testing software
  Default:           False
}

Flag examples {
  Description:       Build example programs
  Default:           True
}

Library {
  Default-language:  Haskell2010
  Hs-source-dirs:    lib
  Build-depends:     base >= 4.2 && < 5
                   , bytestring >= 0.9.2
                   , containers >= 0.4.2
                   , data-default >= 0.5
                   , fixplate >= 0.1.5
                   , ghc-prim
                   , mtl >= 2.0.1.0
                   , parsec >= 3.1.3
                   , pretty >= 1.0
                   , process > 1.0
                   , QuickCheck >= 2.3
                   , syb >= 0.1
                   , random
                   , template-haskell
                   , transformers >= 0.3
                   , uniplate >= 1.6.7
                   , wl-pprint-extras >= 3.0
                   
  exposed-modules: Language.Pony, Language.C99, Language.C99.QuasiQuote
  other-modules:   Data.Functor.Fix
                 , Language.C99.Declarations
                 , Language.C99.Expressions
                 , Language.C99.Functions
                 , Language.C99.Internal
                 , Language.C99.Lexer
                 , Language.C99.Operators
                 , Language.C99.Parser
                 , Language.C99.Pretty
                 , Language.C99.Specifiers
                 , Language.C99.Statements
                 , Language.C99.Syntax
                 , Language.C99.TopLevel
                 , Language.Pony.Overture
  ghc-options:     -O -Wall -fno-warn-orphans -fno-warn-missing-signatures -fwarn-tabs
  Default-extensions:      DeriveDataTypeable
                         , DeriveFoldable
                         , DeriveFunctor
                         , DeriveGeneric
                         , DeriveTraversable
                         , FlexibleContexts
                         , FlexibleInstances
                         , FunctionalDependencies
                         , GADTs
                         , GeneralizedNewtypeDeriving
                         , MultiParamTypeClasses
                         , NamedFieldPuns
                         , OverloadedStrings
                         , QuasiQuotes
                         , Rank2Types
                         , RecordWildCards
                         , StandaloneDeriving
                         , TemplateHaskell
                         , TypeOperators
                         , TypeSynonymInstances
                         , ViewPatterns
}

-- Executable check-malloc {
--   Main-is: Main.hs
--   Hs-source-dirs: examples/check-malloc
--   LD-Options: -w
--   if flag(examples) {
--     Buildable: True
--   } else {
--     Buildable: False
--   }
-- }
--                    
-- Executable concat {
--   Default-language: Haskell2010
--   Build-depends: pony, haskell2010
--   Main-is:  Main.hs
--   Hs-source-dirs: examples/concat
-- }

Executable hello {
  Build-depends: pony, haskell2010
  Default-language: Haskell2010
  Main-is:  Main.hs
  Hs-source-dirs: examples/hello
  if flag(examples) {
    Buildable: True
  } else {
    Buildable: False
  }
}

Executable logical-shift {
  Build-depends: pony, haskell2010
  Default-language: Haskell2010
  Main-is:  Main.hs
  Hs-source-dirs: examples/logical-shift .
  LD-Options:          -w
  if flag(examples) {
    Buildable: True
  } else {
    Buildable: False
  }
}

-- Executable precise-gc {
--   Main-is: Main.hs
--   Hs-source-dirs: examples/precise-gc .
--   LD-Options:          -w
--   if flag(examples) {
--     Buildable: True
--   } else {
--     Buildable: False
--   }
-- }

-- Executable separate-declarations {
--   Main-is: Main.hs
--   Hs-source-dirs: examples/separate-declarations .
--   LD-Options:          -w
--   if flag(examples) {
--     Buildable: True
--   } else {
--     Buildable: False
--   }
-- }

Test-suite test-pony {
    Default-language: Haskell2010
    Type: exitcode-stdio-1.0
    Ghc-options: -fwarn-tabs -Wall -fno-warn-missing-signatures
    -- Hs-source-dirs: Testing Testing/HUnit Testing/QuickCheck
    Main-is: Testing/Main.hs
    Build-depends: base
                 , pony
                 , bytestring
                 , data-default
                 , fixplate
                 , random
                 , HUnit == 1.2.2.3
                 , template-haskell
                 , test-framework
                 , test-framework-hunit
                 , test-framework-quickcheck2
                 , test-framework-th
                 , QuickCheck
                 , wl-pprint-extras
    ghc-options:     -Wall -fno-warn-orphans -fno-warn-missing-signatures -fwarn-tabs
    Default-extensions:      DeriveDataTypeable
                           , DeriveFoldable
                           , DeriveFunctor
                           , DeriveGeneric
                           , DeriveTraversable
                           , FlexibleContexts
                           , FlexibleInstances
                           , FunctionalDependencies
                           , GADTs
                           , GeneralizedNewtypeDeriving
                           , MultiParamTypeClasses
                           , NamedFieldPuns
                           , OverloadedStrings
                           , QuasiQuotes
                           , Rank2Types
                           , RecordWildCards
                           , StandaloneDeriving
                           , TemplateHaskell
                           , TypeOperators
                           , TypeSynonymInstances
                           , ViewPatterns
}


